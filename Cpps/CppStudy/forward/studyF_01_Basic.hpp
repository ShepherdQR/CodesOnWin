/* ===========
//  * Author: Shepherd Qirong
//  * Date: 2022-07-10 22:08:32
//  * Github: https://github.com/ShepherdQR
//  * LastEditors: Shepherd Qirong
//  * LastEditTime: 2022-09-28 21:58:50
//  * Copyright (c) 2019--20xx Shepherd Qirong. All rights reserved.
*/
#pragma once

//#include "studyF_01_Basic_1.hpp"
#include"studyF_01_Basic_2.hpp"


//clang -std=c++2b
//230
namespace Basic{

    // 隐式类型转换：高等级->低等级，有符号->无符号。



    using namespace std;

    auto func_999(){
        //[final] forbids the decorated class or member funciton from being inherited or voerloaded.
        // [=default, =delete] decorates the A(),~A(), operator=, A(A&), etc.
        // enum class A: unsigned int{};

        // std::terminate() 

        /* ===========
        lvalue, the value left to the assignment symbol.
        rvalue, right to the assignment symbol, dies after the expression ends.
        pvalue, pure rvalue. like 2, ture, 1+2, temporary variables generated by operation expressions, original literals, and Lambda expressions.
        xvalue, expiring value, such as the returned object of a function, can be moved using std::move.

        reference collapsing rule: only T is r, then only T&& is r too.
        */

       /* ===========
        regular expression

        $       match end

        (,)     marks the start and end of a subexpression

        *       matches the previous subexpression 0 or more times.     [For example, foo* matches fo and foooo. * is equivalent to {0,}.]
        
        +       matches the previous subexpression 1 or more times       [For example, foo+ matches foo and foooo but does not match fo. + is equivalent to {1,}.]  

        .       matches any single character except the new line \n
        [       the beginning of a bracket expresion.
        
        ?       matches the previous subexpression 1 or more times, or indicates a non-greedy qualifier.        [For example, Your(s)? can match Your in Your or Yours. ? is equivalent to {0,1}.]

        \       Marks the next character as either a special character, or a literal character, or a backward reference, or an octal escape character. For example, n Matches the character n. \n matches newline characters. The sequence \\ Matches the '\' character, while \( matches the '(' character.
        ^       Matches the beginning of the input string, unless it is used in a square bracket expression, at which point it indicates that the set of characters is not accepted.
        {       the beginning of a qualifier expression.
        \|      Indicates a choice between the two.
        {n}     n is a non-negative integer. Matches the determined n times. For example, o{2} cannot match o in for, but can match two o in foo.
        {n,}    n is a non-negative integer. Match at least n times. For example, o{2,} cannot match o, but matches all o in foooooo. o{1,} is equivalent to o+. o{0,} is equivalent to o*.
        {n,m}   m and n are non-negative integers, where n is less than or equal to m. Matches at least n times and matches up to m times. For example, o{1,3} will match the first three o in foooooo. o{0,1} is equivalent to o?. Note that there can be no spaces between the comma and the two numbers.


        function declaration, or function prototype, or function haders.
        Function signature is used to denote the combination of the fuction name and is parameter list, but without the return type.

        The [[nodiscard]] attribute can be used on classes, functions, and enumerations.

       */




    }
}
